#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT m_pAccelStruct;

struct SamplePoint
{
  vec4 position;
  vec4 normal;
  vec4 color;
};

layout(binding = 1, set = 0) buffer lighting_buf { vec4 lighting[]; };
layout(binding = 2, set = 0) buffer voxelIndicesBuf { uint voxelIndices[]; };
layout(binding = 3, set = 0) buffer point_buf { SamplePoint points[]; };
layout(binding = 4, set = 0) buffer indir { uint indirection_buf[]; };
layout(binding = 5, set = 0) buffer prevFrame { vec4 previousReflection[]; };
layout(binding = 6, set = 0) buffer primCounterCount { uint primCounter[]; };

bool m_pAccelStruct_RayQuery_NearestHit(const vec3 rayPos, const vec3 rayDir, float len)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsOpaqueEXT, 0xff, rayPos.xyz, 0, rayDir.xyz, len);
  
  while(rayQueryProceedEXT(rayQuery)) { }
 

  return (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionTriangleEXT);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  vec3 bmin;
  uint voxelsCount;
  vec3 bmax;
  float voxelSize;
  vec3 lightPos;
  uint maxPointsPerVoxelCount;
  uint multibounceFlag;
} kgenArgs;

shared vec3 arrayToConv[256];

void main()
{
  uint tid = gl_GlobalInvocationID.x;
  uvec3 voxelsExtend = uvec3(ceil((kgenArgs.bmax - kgenArgs.bmin) / kgenArgs.voxelSize));
  if (tid.x >= kgenArgs.voxelsCount)
    return;
  uint voxelId = voxelIndices[tid];

  uvec3 voxelIdx = uvec3(voxelId / voxelsExtend.z / voxelsExtend.y, voxelId / voxelsExtend.z % voxelsExtend.y, voxelId % voxelsExtend.z);
  vec3 center = kgenArgs.bmin + (voxelIdx + 0.5) * kgenArgs.voxelSize;
  vec3 positiveLight[3];
  vec3 negativeLight[3];
  for (int i = 0; i < 3; ++i)
  {
    positiveLight[i] = vec3(0);
    negativeLight[i] = vec3(0);
  }
  uint pointsOffset = kgenArgs.maxPointsPerVoxelCount * voxelId;
  for (int i = 0; i < indirection_buf[voxelId * 4]; ++i)
  {
    vec3 normal = points[i + pointsOffset].normal.xyz;
    vec3 pos = points[i + pointsOffset].position.xyz + normal * 1e-3;
    vec3 toLight = kgenArgs.lightPos - pos;
    float toLightDist = length(toLight);
    vec3 toLightDir = toLight / toLightDist;
    // toLightDir = vec3(0, 0.948773, 0.31596);
    // toLightDist = 40.f;
    uint emissionEnc = floatBitsToUint(points[i + pointsOffset].color.y);
    vec3 emission = vec3(uvec3((emissionEnc >> 16) & 0xFF, (emissionEnc >> 8) & 0xFF, emissionEnc & 0xFF)) / 255.0 * points[i + pointsOffset].color.z;
    for (int j = 0; j < 3; ++j)
    {
      positiveLight[j] += max(vec3(0), normal[j]) * emission;
      negativeLight[j] += max(vec3(0), -normal[j]) * emission;
    }
    if (m_pAccelStruct_RayQuery_NearestHit(pos, toLightDir, toLightDist))
    {
      uint colorEnc = floatBitsToUint(points[i + pointsOffset].color.x);
      vec3 color = vec3(uvec3((colorEnc >> 16) & 0xFF, (colorEnc >> 8) & 0xFF, colorEnc & 0xFF)) / 255.0;
      float primArea = points[i + pointsOffset].normal.w / primCounter[uint(points[i + pointsOffset].position.w)];
      // color *= primArea * 20;
      for (int j = 0; j < 3; ++j)
      {
        positiveLight[j] += max(vec3(0), toLightDir[j]) * color;
        negativeLight[j] += max(vec3(0), -toLightDir[j]) * color;
      }
    }
  }
  float brightness = 200.0f;
  for (int i = 0; i < 3; ++i)
  {
    lighting[tid * 6 + i].xyz = positiveLight[i] / kgenArgs.maxPointsPerVoxelCount * brightness;
    lighting[tid * 6 + 3 + i].xyz = negativeLight[i] / kgenArgs.maxPointsPerVoxelCount * brightness;
    if (kgenArgs.multibounceFlag == 1)
    {
      lighting[tid * 6 + i].xyz += previousReflection[tid * 6 + i].xyz;
      lighting[tid * 6 + 3 + i].xyz += previousReflection[tid * 6 + 3 + i].xyz;
    }
  }
  
}

