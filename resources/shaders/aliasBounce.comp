#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

struct FFValue
{
  uint idx;
  float value;
};

layout(binding = 0, set = 0) buffer ff_buf { FFValue ff[]; };
layout(binding = 1, set = 0) buffer lighting_buf { vec4 lighting[]; };
layout(binding = 2, set = 0) buffer target_buf { vec4 bounce[]; };
layout(binding = 3, set = 0) buffer ff_len_buf { uint ff_row_len[]; };

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

const uint GROUP_SIZE = 256;

layout(local_size_x = GROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint voxelsCount;
  uint randValue;
  float threshold;
} kgenArgs;

void main()
{
  uint patchesCount = kgenArgs.voxelsCount * 6;
  uint rowIdx = gl_GlobalInvocationID.x;
  if (rowIdx >= patchesCount)
    return;
  uint rowOffset = ff_row_len[rowIdx];
  uint rowSize = ff_row_len[rowIdx + 1] - rowOffset;
  if (rowSize == 0)
    return;
  
  uint SAMPLES_COUNT = 10;
  uint start = kgenArgs.randValue % rowSize;
  uint seed = start;
  vec4 lightingSampled = vec4(0);
  for (uint i = start; i < (start + SAMPLES_COUNT); ++i)
  {
    seed = (8253729 * seed + 2396403);

    FFValue ffSample = ff[rowOffset + seed % rowSize];
    if (ffSample.value > kgenArgs.threshold)
    {
      uint idx = ffSample.idx & 0xFFFF;
      if (idx != 0xFFFF)
        lightingSampled += lighting[idx];
    }
    else
    {
      uint idx = (ffSample.idx >> 16) & 0xFFFF;
      if (idx != 0xFFFF)
        lightingSampled += lighting[idx];
    }
  }

  bounce[rowIdx] = mix(lightingSampled / SAMPLES_COUNT, bounce[rowIdx], 0.999);
}

