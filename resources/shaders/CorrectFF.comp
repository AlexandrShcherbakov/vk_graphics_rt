#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

layout(binding = 0, set = 0) buffer ffBuf { float ff[]; };

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint voxelsCount;
} kgenArgs;

void main()
{
  uint tid = uint(gl_GlobalInvocationID.x);
  uint patchesCount = 6 * kgenArgs.voxelsCount;
  float sum = 0;
  int BigCount = 0;
  for (int i = 0; i < patchesCount; ++i)
  {
    float value = ff[tid * patchesCount + i];
    if (value < 1.0)
      sum += value;
    else
      BigCount++;
  }
  float multiplier = 1;
  float highEdge = 1;
  if (sum < 1)
  {
    highEdge = (1 - sum) / BigCount;
  }
  else
  {
    multiplier = 1 / (sum + BigCount);
    highEdge = 1 / BigCount;
  }
  for (int i = 0; i < patchesCount; ++i)
  {
    float value = ff[tid * patchesCount + i];
    if (value < 1.0)
      ff[tid * patchesCount + i] *= multiplier;
    else
      ff[tid * patchesCount + i] = highEdge;
  }
}

