#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT m_pAccelStruct;

struct SamplePoint
{
  vec4 position;
  vec4 normal;
  vec4 color;
};

layout(binding = 1, set = 0) buffer point_buf { SamplePoint points[]; };
layout(binding = 2, set = 0) buffer indir { uint indirection_buf[]; };
layout(binding = 3, set = 0) buffer geom { vec4 geomTriangles[]; };
layout(binding = 4, set = 0) buffer primCounterCount { uint primCounter[]; };
layout(binding = 5, set = 0) buffer ffBuf { float ff[]; };
layout(binding = 6, set = 0) buffer debugIndirBuf { uint debugIndir[]; };
layout(binding = 7, set = 0) buffer debugBuf { uint debug[]; };
layout(binding = 8, set = 0) buffer voxelIndicesBuf { uint voxelIndices[]; };

// RayScene intersection with 'm_pAccelStruct'
//
bool m_pAccelStruct_RayQuery_NearestHit(const vec3 rayPos, const vec3 rayDir, float len)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsOpaqueEXT, 0xff, rayPos.xyz, 0, rayDir.xyz, len);
  
  while(rayQueryProceedEXT(rayQuery)) { }
 

  return (rayQueryGetIntersectionTypeEXT(rayQuery, true) != gl_RayQueryCommittedIntersectionTriangleEXT);
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint perFacePointsCount;
  uint voxelsCount;
  uint ff_out;
} kgenArgs;

shared vec3 arrayToConv[256];

void main()
{
  uint tid = uint(gl_LocalInvocationID[0]);
  uint baseVisVoxelId = kgenArgs.ff_out;
  uint targetVisVoxelId = gl_WorkGroupID.x;
  uint baseVoxelId = voxelIndices[baseVisVoxelId];
  uint targetVoxelId = voxelIndices[targetVisVoxelId];
  uint pointsPerVoxel = 6 * kgenArgs.perFacePointsCount;
  uint pointsCount = indirection_buf[baseVoxelId * 4];

  if (gl_GlobalInvocationID.x == 0 && gl_GlobalInvocationID.y == 0)
  {
    debugIndir[1] = 1;
    debugIndir[2] = 0;
    debugIndir[3] = 0;
  }

  vec3 positiveFF[6];
  vec3 negativeFF[6];
  for (int i = 0; i < 6; ++i)
  {
    positiveFF[i] = vec3(0);
    negativeFF[i] = vec3(0);
  }
  vec3 positiveAreas = vec3(0);
  vec3 negativeAreas = vec3(0);
  if (tid < pointsCount)
  {
    uint sourcePointOffset = baseVoxelId * pointsPerVoxel;
    uint globalPointsCount = pointsPerVoxel * kgenArgs.voxelsCount;

    vec3 pos = points[tid + sourcePointOffset].position.xyz;
    vec3 normal = points[tid + sourcePointOffset].normal.xyz;
    float formFactorsSum = 0;

    vec3 positiveWeights = max(normal, vec3(0));
    vec3 negativeWeights = max(-normal, vec3(0));

    vec4 p1 = (geomTriangles[uint(points[tid + sourcePointOffset].position.w * 3 + 0) * 2]);
    vec4 p2 = (geomTriangles[uint(points[tid + sourcePointOffset].position.w * 3 + 1) * 2]);
    vec4 p3 = (geomTriangles[uint(points[tid + sourcePointOffset].position.w * 3 + 2) * 2]);
    float primArea = 1.0;//length(cross(p2.xyz - p1.xyz, p3.xyz - p1.xyz)) * 0.5 / primCounter[uint(points[tid + sourcePointOffset].position.w)];
    float geomMult = 1.0 / primArea / 3.1415926535897932;
    float areas = points[tid + sourcePointOffset].normal.w / primCounter[uint(points[tid + sourcePointOffset].position.w)];
    positiveAreas = max(vec3(0), normal * areas);
    negativeAreas = max(vec3(0), -normal * areas);

    uint targetPointsOffset = targetVoxelId * pointsPerVoxel;
    uint targetPointsCount = indirection_buf[targetVoxelId * 4];
    for (uint i = 0; i < targetPointsCount; ++i)
    {
      if (targetVoxelId == baseVoxelId && i == tid)
        continue;
      vec3 target = points[i + targetPointsOffset].position.xyz;
      vec3 dir = target - pos;
      float len = length(dir);
      if (len < 1e-5)
        continue;
      dir /= len;
      float cosTheta = dot(dir, normal);
      if (cosTheta <= 0.0)
        continue;
      vec3 targetNormal = points[i + targetPointsOffset].normal.xyz;
      float cosTheta1 = dot(-dir, targetNormal);
      if (cosTheta1 <= 0.0)
        continue; 
      if (m_pAccelStruct_RayQuery_NearestHit(pos + dir * 1e-2, dir, len - 1e-2 * 2.0))
      {
        if (baseVoxelId == 138 && tid == 5 && false)
        {
          uint idx = atomicAdd(debugIndir[0], 2);
          debug[idx] = i + targetPointsOffset;
          debug[idx + 1] = tid + sourcePointOffset;
        }
        
        vec4 p1 = (geomTriangles[uint(points[i + targetPointsOffset].position.w * 3 + 0) * 2]);
        vec4 p2 = (geomTriangles[uint(points[i + targetPointsOffset].position.w * 3 + 1) * 2]);
        vec4 p3 = (geomTriangles[uint(points[i + targetPointsOffset].position.w * 3 + 2) * 2]);
        float primArea = points[i + targetPointsOffset].normal.w / primCounter[uint(points[i + targetPointsOffset].position.w)];
        float ff = min((cosTheta * cosTheta1) / len / len * primArea * geomMult, 1.0);

        vec3 targetPositiveWeights = max(targetNormal, vec3(0));
        vec3 targetNegativeWeights = max(-targetNormal, vec3(0));

        for (uint j = 0; j < 3; ++j)
        {
          positiveFF[j] += ff * targetPositiveWeights * positiveWeights[j];
          negativeFF[j] += ff * targetNegativeWeights * positiveWeights[j];
          positiveFF[j + 3] += ff * targetPositiveWeights * negativeWeights[j];
          negativeFF[j + 3] += ff * targetNegativeWeights * negativeWeights[j];
        }
      }
    }
  }
  vec3 positiveAreaInvSum = vec3(0);
  vec3 negativeAreaInvSum = vec3(0);
  {
    barrier();
    arrayToConv[tid] = positiveAreas;
    for (uint d = 128; d > 0; d >>= 1)
    {
      barrier();
      if (tid < d)
      {
        arrayToConv[tid] += arrayToConv[tid + d];
      }
    }
    barrier();
    for (int i = 0; i < 3; ++i)
      positiveAreaInvSum[i] = arrayToConv[0][i] > 1e-5 ? 1.0 / arrayToConv[0][i] : 0.0;
  }
  {
    barrier();
    arrayToConv[tid] = negativeAreas;
    for (uint d = 128; d > 0; d >>= 1)
    {
      barrier();
      if (tid < d)
      {
        arrayToConv[tid] += arrayToConv[tid + d];
      }
    }
    barrier();
    for (int i = 0; i < 3; ++i)
      negativeAreaInvSum[i] = arrayToConv[0][i] > 1e-5 ? 1.0 / arrayToConv[0][i] : 0.0;
  }
  for (int i = 0; i < 6; ++i)
  {
    barrier();
    arrayToConv[tid] = positiveFF[i] * (i < 3 ? positiveAreas[i] : negativeAreas[i - 3]);
    for (uint d = 128; d > 0; d >>= 1)
    {
      barrier();
      if (tid < d)
      {
        arrayToConv[tid] += arrayToConv[tid + d];
      }
    }
    barrier();
    if (tid == 0)
    {
      for (uint j = 0; j < 3; ++j)
        ff[(i * kgenArgs.voxelsCount * 6) + targetVisVoxelId * 6 + j] = arrayToConv[0][j]
          * (i < 3 ? positiveAreaInvSum[i] : negativeAreaInvSum[i - 3]);
    }

    barrier();
    arrayToConv[tid] = negativeFF[i] * (i < 3 ? positiveAreas[i] : negativeAreas[i - 3]);
    for (uint d = 128; d > 0; d >>= 1)
    {
      barrier();
      if (tid < d)
      {
        arrayToConv[tid] += arrayToConv[tid + d];
      }
    }
    barrier();
    if (tid == 0)
    {
      for (uint j = 0; j < 3; ++j)
        ff[(i * kgenArgs.voxelsCount * 6) + targetVisVoxelId * 6 + 3 + j] = arrayToConv[0][j]
          * (i < 3 ? positiveAreaInvSum[i] : negativeAreaInvSum[i - 3]);
    }
  }
}

