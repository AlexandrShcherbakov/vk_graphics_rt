#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

struct SamplePoint
{
  vec4 position;
  vec4 normal;
  vec4 color;
};

layout(binding = 0, set = 0) buffer point_buf { SamplePoint points[]; };
layout(binding = 1, set = 0) buffer indir { uint indirection_buf[]; };
layout(binding = 2, set = 0) buffer geom { vec4 geomTriangles[]; };
layout(binding = 3, set = 0) buffer primCounterCount { uint primCounter[]; };
layout(binding = 4, set = 0) buffer ffRawBuf { float ffRaw[]; };
layout(binding = 5, set = 0) buffer areaBuf { float areas[]; };
layout(binding = 6, set = 0) buffer ffFinalBuf { float ff[]; };

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  uint perFacePointsCount;
  uint voxelsCount;
  uint voxelId;
} kgenArgs;

void main()
{
  uint tid = uint(gl_LocalInvocationID[0]);
  uint baseVoxelId = kgenArgs.voxelId;
  uint curVoxelId = uint(gl_WorkGroupID.x) + baseVoxelId;
  uint pointsCount = indirection_buf[curVoxelId * 4];

  uint pointsPerVoxel = 6 * kgenArgs.perFacePointsCount;
  uint pointsOffset = curVoxelId * pointsPerVoxel;
  uint globalPointsCount = pointsPerVoxel * kgenArgs.voxelsCount;

  vec3 positiveFF = vec3(0);
  vec3 negativeFF = vec3(0);
  for (int pointIdx = 0; pointIdx < indirection_buf[curVoxelId * 4]; ++pointIdx)
  {
    vec3 normal = points[pointIdx + pointsOffset].normal.xyz;
    float ff = ffRaw[(baseVoxelId * pointsPerVoxel + pointIdx) * globalPointsCount + pointsOffset + tid];
    positiveFF += max(normal, vec3(0)) * ff;
    negativeFF += max(-normal, vec3(0)) * ff;
  }
  for (int i = 0; i < 3; ++i)
  {
    ffRaw[(baseVoxelId * pointsPerVoxel + i) * globalPointsCount + pointsOffset + tid] = positiveFF[i];
    ffRaw[(baseVoxelId * pointsPerVoxel + i + 3) * globalPointsCount + pointsOffset + tid] = negativeFF[i];
  }
  if (gl_GlobalInvocationID.x == 0)
  {
    vec3 positiveAreas = vec3(0);
    vec3 negativeAreas = vec3(0);
    for (int pointIdx = 0; pointIdx < indirection_buf[curVoxelId * 4]; ++pointIdx)
    {
      vec3 normal = points[pointIdx + pointsOffset].normal.xyz;

      vec4 p1 = (geomTriangles[uint(points[pointIdx + pointsOffset].position.w * 3 + 0) * 2]);
      vec4 p2 = (geomTriangles[uint(points[pointIdx + pointsOffset].position.w * 3 + 1) * 2]);
      vec4 p3 = (geomTriangles[uint(points[pointIdx + pointsOffset].position.w * 3 + 2) * 2]);
      float primArea = length(cross(p2.xyz - p1.xyz, p3.xyz - p1.xyz)) * 0.5 / primCounter[uint(points[pointIdx + pointsOffset].position.w)];

      positiveAreas += max(normal, vec3(0)) * primArea;
      negativeAreas += max(-normal, vec3(0)) * primArea;
    }
    for (int i = 0; i < 3; ++i)
    {
      areas[baseVoxelId * 6 + i] = positiveAreas[i];
      areas[baseVoxelId * 6 + 3 + i] = negativeAreas[i];
    }
  }

  if (tid < 6)
  {
    uint secondPassVoxelIdx = baseVoxelId - uint(gl_WorkGroupID.x);
    uint secondPassPointsOffset = secondPassVoxelIdx * pointsPerVoxel;
    vec3 positiveFF = vec3(0);
    vec3 negativeFF = vec3(0);
    for (int pointIdx = 0; pointIdx < indirection_buf[secondPassVoxelIdx * 4]; ++pointIdx)
    {
      vec3 normal = points[pointIdx + secondPassPointsOffset].normal.xyz;
      float ff = ffRaw[(secondPassPointsOffset + tid) * globalPointsCount + baseVoxelId * pointsPerVoxel + pointIdx];
      positiveFF += max(normal, vec3(0)) * ff;
      negativeFF += max(-normal, vec3(0)) * ff;
    }
    for (int i = 0; i < 3; ++i)
    {
      ff[(6 * secondPassVoxelIdx + tid) * kgenArgs.voxelsCount * 6 + baseVoxelId * 6 + i] = positiveFF[i];
      ff[(6 * secondPassVoxelIdx + tid) * kgenArgs.voxelsCount * 6 + baseVoxelId * 6 + i + 3] = negativeFF[i];
      ff[(baseVoxelId * 6 + i) * kgenArgs.voxelsCount * 6 + 6 * secondPassVoxelIdx + tid] = positiveFF[i];
      ff[(baseVoxelId * 6 + i + 3) * kgenArgs.voxelsCount * 6 + 6 * secondPassVoxelIdx + tid] = negativeFF[i];
    }
  }
}

