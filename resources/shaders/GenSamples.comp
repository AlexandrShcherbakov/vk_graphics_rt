#version 460
#extension GL_GOOGLE_include_directive : require
#extension GL_EXT_ray_query : require

#include "unpack_attributes.h"

layout(binding = 0, set = 0) uniform accelerationStructureEXT m_pAccelStruct;
layout(binding = 1, set = 0) buffer rand_points { vec4 points[]; };
layout(binding = 2, set = 0) buffer out_point { vec4 out_points[]; };
layout(binding = 3, set = 0) buffer counters { uint indirect_buf[]; };
layout(binding = 4, set = 0) buffer geom { vec4 geomTriangles[]; };
layout(binding = 5, set = 0) buffer geomIndices { uint indexBuffer[]; };
layout(binding = 6, set = 0) buffer perInstMats { mat4 matrices[]; };
layout(binding = 7, set = 0) buffer perInstInfo { uvec2 instInfo[]; };
layout(binding = 8, set = 0) buffer primCounterCount { uint primCounter[]; };
layout(binding = 9, set = 0) buffer usedVoxelsBuffer { uint usedBuffers[]; };
layout(binding = 10, set = 0) buffer usedVoxelsCountBuffer { uint usedVoxelsCount[]; };

// RayScene intersection with 'm_pAccelStruct'
//
bool m_pAccelStruct_RayQuery_NearestHit(const vec3 rayPos, const vec3 rayDir, float len, inout vec3 target, inout vec3 normal,
  inout uint startIdxId, inout uint instId)
{
  rayQueryEXT rayQuery;
  rayQueryInitializeEXT(rayQuery, m_pAccelStruct, gl_RayFlagsOpaqueEXT, 0xff, rayPos.xyz, 0, rayDir.xyz, len);
  
  while(rayQueryProceedEXT(rayQuery)) { }
 

  if(rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT)
  {    
	  float t         = rayQueryGetIntersectionTEXT(rayQuery, true);
    int instanceIdx = rayQueryGetIntersectionInstanceCustomIndexEXT(rayQuery, true);
    uint primIdx = rayQueryGetIntersectionPrimitiveIndexEXT(rayQuery, true);
    startIdxId = primIdx + instInfo[instanceIdx].x / 3;
    uint idx1 = indexBuffer[startIdxId * 3 + 0] + instInfo[instanceIdx].y;
    uint idx2 = indexBuffer[startIdxId * 3 + 1] + instInfo[instanceIdx].y;
    uint idx3 = indexBuffer[startIdxId * 3 + 2] + instInfo[instanceIdx].y;
    vec4 p1 = (geomTriangles[idx1 * 2]);
    vec4 p2 = (geomTriangles[idx2 * 2]);
    vec4 p3 = (geomTriangles[idx3 * 2]);

    vec2 bars     = rayQueryGetIntersectionBarycentricsEXT(rayQuery, true);

    vec3 n1 = DecodeNormal(floatBitsToInt(p1.w));
    n1    = normalize(mat3(transpose(inverse(matrices[instanceIdx]))) * n1);
    vec3 n2 = DecodeNormal(floatBitsToInt(p2.w));
    n2    = normalize(mat3(transpose(inverse(matrices[instanceIdx]))) * n2);
    vec3 n3 = DecodeNormal(floatBitsToInt(p3.w));
    n3    = normalize(mat3(transpose(inverse(matrices[instanceIdx]))) * n3);
    normal = normalize(n1 * bars.x + n2 * bars.y + n3 * (1 - bars.x - bars.y));
    instId = indexBuffer[3];

    target = rayPos + rayDir * t;
    if (dot(normal, rayDir) >= 0.0)
      return false;

    return true;
  }

  return false;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout( push_constant ) uniform kernelArgs
{
  vec3 bmin;
  uint perFacePointsCount;
  vec3 bmax;
  float voxelSize;
  mat4 mModel;
  float time;
} kgenArgs;


void main()
{
  uint tid = uint(gl_GlobalInvocationID[0]); 

  uvec3 voxelsExtend = uvec3(ceil((kgenArgs.bmax - kgenArgs.bmin) / kgenArgs.voxelSize));
  uint pointsCount = voxelsExtend.x * voxelsExtend.y * voxelsExtend.z * 6 * kgenArgs.perFacePointsCount;

  if (tid == 0)
  {
    usedVoxelsCount[1] = 1;
    usedVoxelsCount[2] = 1;
    usedVoxelsCount[5] = 1;
  }

  if (tid >= pointsCount)
    return;

  uint onSurfaceIdx = tid % kgenArgs.perFacePointsCount;
  tid /= kgenArgs.perFacePointsCount;
  uint surfaceIdx = tid % 6;
  tid /= 6;
  uint zVoxel = tid % voxelsExtend.z;
  tid /= voxelsExtend.z;
  uint yVoxel = tid % voxelsExtend.y;
  tid /= voxelsExtend.y;
  uint xVoxel = tid % voxelsExtend.x;
  tid /= voxelsExtend.x;

  uint voxelIdx = (xVoxel * voxelsExtend.y + yVoxel) * voxelsExtend.z + zVoxel;
  uint indirectOffset = voxelIdx * 4;
  if (onSurfaceIdx == 0 && surfaceIdx == 0)
  {
    indirect_buf[indirectOffset + 1] = 1;
    indirect_buf[indirectOffset + 2] = 0;
    indirect_buf[indirectOffset + 3] = 0;
  }
  uint pointsPerVoxel = 6 * kgenArgs.perFacePointsCount;
  uint pointsOffset = voxelIdx * pointsPerVoxel;

  vec3 voxelCenter = vec3(xVoxel, yVoxel, zVoxel) * kgenArgs.voxelSize + kgenArgs.bmin + kgenArgs.voxelSize * 0.5;
  uint axis = surfaceIdx % 3;
  float offsetSign = surfaceIdx / 3 == 0 ? -1.0 : 1.0;
  vec3 offsetMask = vec3(axis == 0 ? 1.0 : 0.0, axis == 1 ? 1.0 : 0.0, axis == 2 ? 1.0 : 0.0);
  vec3 randMask = vec3(1) - offsetMask;
  vec3 offset = offsetMask * offsetSign * kgenArgs.voxelSize * 0.5;
  vec3 sideCenter = voxelCenter + offset;

  vec3 randPoint = vec3(0);
  for (int i = 0, idx = 0; i < 3; ++i)
  {
    if (randMask[i] != 0)
    {
      randPoint[i] = points[onSurfaceIdx][idx];
      idx++;
    }
  }

  vec3 point = randPoint * kgenArgs.voxelSize + sideCenter;

  vec3 res;
  vec3 normal;
  vec3 dir = voxelCenter - point;
  float len = length(dir);
  dir /= len;
  dir = -offsetMask * offsetSign;
  len = kgenArgs.voxelSize;
  uint startIdxId;
  uint out_val;
  if (m_pAccelStruct_RayQuery_NearestHit(point, dir, len, res, normal, startIdxId, out_val))
  {
    float targetLen = length(res - point);
    uint targetIdx = atomicAdd(indirect_buf[indirectOffset + 0], 1) + pointsOffset;
    out_points[targetIdx * 2] = vec4(res, startIdxId);
    out_points[targetIdx * 2 + 1] = vec4(normal, uintBitsToFloat(out_val));
    atomicAdd(primCounter[startIdxId], 1);
    if (targetIdx == pointsOffset)
    {
      uint voxelPlaceId = atomicAdd(usedVoxelsCount[0], 1);
      usedBuffers[voxelPlaceId] = voxelIdx;
      atomicMax(usedVoxelsCount[3], voxelPlaceId + 1);
      atomicMax(usedVoxelsCount[4], voxelPlaceId + 1);
    }
  }
  // else
  // {
  //   uint targetIdx = atomicAdd(indirect_buf[indirectOffset + 0], 1) + pointsOffset;
  //   out_points[targetIdx] = vec4(mix(point, point + dir * len * 2.f, fract(kgenArgs.time / 7.0)), 0);
  //   out_points[targetIdx * 2 + 1] = vec4(normal, 0);
    
  // }
}

